geom_point(size = 1, alpha = 0.85) +
labs(x = ifelse(nmds, "NMDS 1", "MDS 1"),
y = ifelse(nmds, "NMDS 2", "MDS 2"),
color = "",
title = plot_title) +
theme_cowplot() +
background_grid() +
scale_color_manual(values = c(za_pal, "#DDDDDD")) +
theme(legend.position = "top",
legend.justification = "center",
plot.title = element_text(face = "italic"))
# coord_fixed()
if (!legend) g <- g + theme(legend.position = "none")
return(g)
}
## panphlan plots ----
sp <- c("Prevotella_copri",
"Faecalibacterium_prausnitzii",
"Bacteroides_vulgatus",
"Eubacterium_siraeum",
"Alistipes_putredinis",
"Butyrivibrio_crossotus")
plots <- list()
for (org in sp){
infile <- here(paste0("input_final/panphlan_v2/", org,
"_profile_sensitive.txt"))
legend_flag <- ifelse(org == "Prevotella_copri", T, F)
p <- plot_panphlan(infile, nmds = F,
plot_title = gsub("_", " ", org), legend = legend_flag)
plots[[org]] <- p
}
a <- plot_grid(plotlist = plots, ncol = 3)
## adonis
adonis_res <- data.frame()
# sp <- c("Prevotella_copri",
#         "Faecalibacterium_prausnitzii",
#         "Bacteroides_vulgatus",
#         "Eubacterium_siraeum",
#         "Alistipes_putredinis",
#         "Butyrivibrio_crossotus")
for (org in sp){
panphlan_f <- here(paste0("input_final/panphlan_v2/", org,
"_profile_sensitive.txt"))
# read panphlan pangenome matrix
panphlan <- read.table(panphlan_f, sep = "\t", header = T, row.names = 1, quote = "")
colnames(panphlan) <- gsub('.tsv', '', colnames(panphlan))
# metadata
meta <- za_pheno %>%
filter(sample %in% names(panphlan))
# filter for relevant samples
panphlan <- panphlan[, meta$sample]
# calculate jaccard distance
panphlan_t <- t(panphlan)
dist_matrix <- vegdist(panphlan_t, method = "jaccard", binary = T)
ad <- adonis(dist_matrix~site, meta)
adonis_res <- rbind(adonis_res,
data.frame("Species" = org,
"R2" = ad$aov.tab$R2[1],
"pvalue" = ad$aov.tab$`Pr(>F)`[1]))
}
b <- adonis_res %>%
mutate(R2 = round(R2, 3),
FDR = p.adjust(pvalue, method = "fdr")) %>%
ggtexttable(rows = NULL, cols = c("Species", "R2", "P value", "FDR"), theme =
ttheme("classic", base_size = 12, padding = unit(c(4, 4), "mm")))
plot_grid(a, b)
ggsave(here("final_plots/supplementary/figure_SN_panphlan.png"),
width = 10, height = 10)
plot_grid(a, b, ncol = 2, labels = c("A", "B"))
ggsave(here("final_plots/supplementary/figure_SN_panphlan.png"),
width = 10, height = 10)
b <- adonis_res %>%
mutate(R2 = round(R2, 3),
FDR = p.adjust(pvalue, method = "fdr"),
Species = gsub("_", "", Species)) %>%
ggtexttable(rows = NULL, cols = c("Species", "R2", "P value", "FDR"), theme =
ttheme("classic", base_size = 12, padding = unit(c(4, 4), "mm")))
plot_grid(a, b, ncol = 1, labels = c("A", "B"))
ggsave(here("final_plots/supplementary/figure_SN_panphlan.png"),
width = 10, height = 10)
a <- plot_grid(plotlist = plots, ncol = 3, align = "hv", axis = "lrbt")
a
for (org in sp){
infile <- here(paste0("input_final/panphlan_v2/", org,
"_profile_sensitive.txt"))
# legend_flag <- ifelse(org == "Prevotella_copri", T, F)
p <- plot_panphlan(infile, nmds = F,
plot_title = gsub("_", " ", org), legend = F)
plots[[org]] <- p
}
legend <- get_legend(p + theme(legend.position = "top"))
legend <- get_legend(p + theme(legend.position = "top"))
a1 <- plot_grid(plotlist = plots, ncol = 3, align = "hv", axis = "lrbt")
a <- plot_grid(a1, legend, ncol = 1, rel_heights = c(0.95, 0.05))
a
plot_grid(a, b, ncol = 1, labels = c("A", "B"))
ggsave(here("final_plots/supplementary/figure_SN_panphlan.png"),
width = 10, height = 10)
plot_grid(a, b, ncol = 1, labels = c("A", "B"), rel_heights = c(0.6, 0.4))
ggsave(here("final_plots/supplementary/figure_SN_panphlan.png"),
width = 10, height = 8)
plot_grid(a, b, ncol = 1, labels = c("A", "B"), rel_heights = c(0.7, 0.3))
ggsave(here("final_plots/supplementary/figure_SN_panphlan.png"),
width = 10, height = 8)
b <- adonis_res %>%
mutate(R2 = round(R2, 3),
FDR = p.adjust(pvalue, method = "fdr"),
Species = gsub("_", " ", Species)) %>%
ggtexttable(rows = NULL, cols = c("Species", "R2", "P value", "FDR"), theme =
ttheme("classic", base_size = 12, padding = unit(c(4, 4), "mm")))
plot_grid(a, b, ncol = 1, labels = c("A", "B"), rel_heights = c(0.7, 0.3))
ggsave(here("final_plots/supplementary/figure_SN_panphlan.png"),
width = 10, height = 8)
# plot table of conmeds and categories
library(cowplot)
library(dplyr)
library(ggplot2)
library(ggpubr)
library(vegan)
### conmeds data table
conmeds <- read.table(here("input_final/conmeds.tsv"), sep = "\t",
header = T, quote = "")
head(conmeds)
### conmeds data table
conmeds <- read.table(here("input_final/conmeds.tsv"), sep = "\t",
header = T, quote = "")
conmeds <- conmeds %>%
filter(!(medicine_CURATED %in% c("", "??", "NONE", "UNKNOWN")))
dim(conmeds)
head(conmeds)
length(unique(conmeds$sample))
za_meta <- readRDS(here("rds/za_meta.rds"))
setdiff(za_meta$sample, unique(conmeds$sample))
za_pheno
m <- setdiff(za_meta$sample, unique(conmeds$sample))
za_pheno %>% filter(sample %in% m) %>% select(sample, medication, medication_reason)
za_pheno %>% filter(sample %in% m) %>% dplyr::select(sample, medication, medication_reason)
za_pheno %>% filter(sample %in% m) %>% dplyr::select(sample, medication, medication_reason) %>% View()
18/118
## load data ----
source(here("scripts/load_data.R"))
labs <- read.table(here("input_final/za_labels.tsv"), sep = "\t", header = T)
## readcounts ----
## read PAIRS
za_readcounts <- read.table(here("input_final", "readcounts",
"za_readcounts_preprocessing.txt"),
sep = '\t', header = T)
# read PAIRS -- multiply by 2
# filter out extra samples
za_counts <- za_readcounts %>%
filter(Sample %in% za_meta$sample) %>%
mutate(raw_reads = raw_reads * 2,
trimmed_reads = trimmed_reads * 2,
dedup_reads = dedup_reads * 2,
host_removed_reads = host_removed_reads * 2,
orphan_reads = orphan_reads * 2
) %>%
dplyr::select(-starts_with("orphan"), -ends_with("frac"))
# za_counts <- za_readcounts[, c(1:3, 5, 7)]
## stats for intro
za_counts %>%
mutate(
Gb_raw = raw_reads * 150 / 1e9,
Gb_preproc = host_removed_reads * 150 / 1e9
) %>%
summarise(
median_gb_raw = median(Gb_raw),
median_gb_raw = median(Gb_raw),
mean_gb_preproc = mean(Gb_preproc)
)
za_counts
paste(c(1, 3))
## stats for intro
za_counts %>%
mutate(
Gb_raw = raw_reads * 150 / 1e9,
Gb_preproc = host_removed_reads * 150 / 1e9
) %>%
summarise(
median_reads_raw = median(raw_reads),
median_reads_preproc = median(host_removed_reads),
range_reads_raw = paste(range(raw_reads)),
range_reads_preproc = paste(range(host_removed_reads)),
median_gb_raw = median(Gb_raw),
median_gb_raw = median(Gb_raw),
mean_gb_preproc = mean(Gb_preproc)
)
paste(range(za_counts$raw_reads))
## stats for intro
za_counts %>%
mutate(
Gb_raw = raw_reads * 150 / 1e9,
Gb_preproc = host_removed_reads * 150 / 1e9
) %>%
summarise(
median_reads_raw = median(raw_reads),
median_reads_preproc = median(host_removed_reads),
range_reads_raw = paste(range(raw_reads), collapse = T),
range_reads_preproc = paste(range(host_removed_reads), collapse = T),
median_gb_raw = median(Gb_raw),
median_gb_raw = median(Gb_raw),
mean_gb_preproc = mean(Gb_preproc)
)
## stats for intro
za_counts %>%
mutate(
Gb_raw = raw_reads * 150 / 1e9,
Gb_preproc = host_removed_reads * 150 / 1e9
) %>%
summarise(
median_reads_raw = median(raw_reads),
median_reads_preproc = median(host_removed_reads),
range_reads_raw = paste(range(raw_reads), collapse = " "),
range_reads_preproc = paste(range(host_removed_reads), collapse = " "),
median_gb_raw = median(Gb_raw),
median_gb_raw = median(Gb_raw),
mean_gb_preproc = mean(Gb_preproc)
)
za_counts %>%
mutate(
Gb_raw = raw_reads * 150 / 1e9,
Gb_preproc = host_removed_reads * 150 / 1e9
) %>%
summarise(
median_reads_raw = median(raw_reads) / 1e6,
median_reads_preproc = median(host_removed_reads) / 1e6,
range_reads_raw = paste(range(raw_reads), collapse = " ") / 1e6,
range_reads_preproc = paste(range(host_removed_reads), collapse = " ") / 1e6,
median_gb_raw = median(Gb_raw),
median_gb_raw = median(Gb_raw),
mean_gb_preproc = mean(Gb_preproc)
)
## stats for intro
za_counts %>%
mutate(
Gb_raw = raw_reads * 150 / 1e9,
Gb_preproc = host_removed_reads * 150 / 1e9
) %>%
summarise(
median_reads_raw = median(raw_reads) / 1e6,
median_reads_preproc = median(host_removed_reads) / 1e6,
range_reads_raw = paste(range(raw_reads) / 1e6, collapse = " "),
range_reads_preproc = paste(range(host_removed_reads) / 1e6, collapse = " "),
median_gb_raw = median(Gb_raw),
median_gb_raw = median(Gb_raw),
mean_gb_preproc = mean(Gb_preproc)
)
## stats for intro
za_counts %>%
mutate(
Gb_raw = raw_reads * 150 / 1e9,
Gb_preproc = host_removed_reads * 150 / 1e9
) %>%
summarise(
median_reads_raw = median(raw_reads) / 1e6,
median_reads_preproc = median(host_removed_reads) / 1e6,
range_reads_raw = paste(range(raw_reads) / 1e6, collapse = " "),
range_reads_preproc = paste(range(host_removed_reads) / 1e6, collapse = " "),
median_gb_raw = median(Gb_raw),
median_gb_raw = median(Gb_raw),
mean_gb_preproc = mean(Gb_preproc)
) %>%
mutate(across(where(is.numeric), ~round(., 3)))
labs <- read.table(here("input_final/za_labels.tsv"), sep = "\t", header = T)
## readcounts ----
## read PAIRS
za_readcounts <- read.table(here("input_final", "readcounts",
"za_readcounts_preprocessing.txt"),
sep = '\t', header = T)
# read PAIRS -- multiply by 2
# filter out extra samples
za_counts <- za_readcounts %>%
filter(Sample %in% za_meta$sample) %>%
mutate(raw_reads = raw_reads * 2,
trimmed_reads = trimmed_reads * 2,
dedup_reads = dedup_reads * 2,
host_removed_reads = host_removed_reads * 2,
orphan_reads = orphan_reads * 2
) %>%
dplyr::select(-starts_with("orphan"), -ends_with("frac"))
# za_counts <- za_readcounts[, c(1:3, 5, 7)]
## stats for intro
za_counts %>%
mutate(
Gb_raw = raw_reads * 150 / 1e9,
Gb_preproc = host_removed_reads * 150 / 1e9
) %>%
summarise(
median_reads_raw = median(raw_reads) / 1e6,
median_reads_preproc = median(host_removed_reads) / 1e6,
range_reads_raw = paste(range(raw_reads) / 1e6, collapse = " "),
range_reads_preproc = paste(range(host_removed_reads) / 1e6, collapse = " "),
median_gb_raw = median(Gb_raw),
median_gb_raw = median(Gb_raw),
mean_gb_preproc = mean(Gb_preproc)
) %>%
mutate(across(where(is.numeric), ~round(., 3)))
## A) MDS ordination ----
# find bray-curtis distance with vegdist
# vare_dis <- vegdist(t(za_S_rel), method = "bray")
vare_dis <- vegdist(t(za_S_css), method = "bray")
# adonis
meta <- za_meta %>% filter(sample %in% names(za_S_rel))
meta <- meta[match(names(za_S_rel), meta$sample), ]
adonis(vare_dis ~ site, data = meta)
dispersion <- betadisper(vare_dis, group = meta$site)
permutest(dispersion)
sample_meta
za_meat
za_meta
library(cowplot)
library(ggpubr)
library(here)
library(reshape2)
library(scales)
library(tidyverse)
## load data ----
source(here("scripts/load_data.R"))
## Succinatimonas correlation with other genera --
za_G_cor <- cor(t(za_G_rel[genefilter(za_G_rel, pOverA(0.1, 0.0001)), ]), method = "spearman")
za_G_cor_long <- melt_dist(za_G_cor)
za_G_cor_long %>%
filter(iso1 == "Succinatimonas" | iso2 == "Succinatimonas") %>%
arrange(-abs(dist)) %>%
head(20)
## plot distributions
za_VANISH_G_long <- reshape2::melt(za_G_VANISH %>% rownames_to_column(var = "G"),
id.vars = "G",
variable.name = "sample",
value.name = "relab")
za_VANISH_G_long <- merge(za_VANISH_G_long, za_meta, by = "sample")
succin_long <- za_VANISH_G_long %>%
filter(G %in% c("Succinatimonas", "Succinivibrio", "Treponema") & site == "Bushbuckridge")
density_plot <- ggplot(succin_long, aes(x = relab * 100)) +
geom_density(fill = za_pal[1]) +
scale_x_log10(label = comma) +
facet_wrap(~ G, scales = "free_y", ncol = 1) +
theme_cowplot() +
labs(
x = "Relative abundance (%)",
y = "Density"
)
## correlate VANISH taxa ----
vanish_cor <- function(counts){
# correlation
vanish_cor_G <- cor(t(counts), method = "spearman")
# cluster to order rows
hc <- hclust(dist(vanish_cor_G))
row_order <- hc$order
vanish_cor_G <- vanish_cor_G[row_order, row_order]
# plot
vanish_cor_G_long <- melt(vanish_cor_G, value.name = "cor")
ggplot(vanish_cor_G_long, aes(Var2, Var1, fill = cor)) +
geom_tile() +
geom_text(aes(label = round(cor, 2))) +
scale_fill_gradient2(low = "blue", high = "red", mid = "white",
midpoint = 0, limit = c(-1,1)) +
theme_cowplot() +
theme(
axis.text.x = element_text(angle = 90, hjust = 1, vjust = 0.5),
axis.title = element_blank()
) +
labs(
fill = "Spearman's\nrho"
)
}
plot_data <- za_G_VANISH
rownames(plot_data) <- paste0(rownames(plot_data), "\n(", vanish_tax[match(rownames(plot_data), vanish_tax$G), "F"], ")")
plot_G <- vanish_cor(plot_data)
plot_F <- vanish_cor(za_F_VANISH)
plot_grid(
plot_grid(density_plot, plot_F, labels = c("A", "B")),
plot_G,
ncol = 1,
labels = c("", "C"),
rel_heights = c(0.27, 0.63)
)
ggsave(here("final_plots/supplementary/figure_S2_VANISH_cor.png"),
width = 9, height = 11)
library(genefilter)
library(cowplot)
library(genefilter)
library(ggpubr)
library(here)
library(reshape2)
library(scales)
library(tidyverse)
## load data ----
source(here("scripts/load_data.R"))
## Succinatimonas correlation with other genera --
za_G_cor <- cor(t(za_G_rel[genefilter(za_G_rel, pOverA(0.1, 0.0001)), ]), method = "spearman")
za_G_cor_long <- melt_dist(za_G_cor)
za_G_cor_long %>%
filter(iso1 == "Succinatimonas" | iso2 == "Succinatimonas") %>%
arrange(-abs(dist)) %>%
head(20)
## plot distributions
za_VANISH_G_long <- reshape2::melt(za_G_VANISH %>% rownames_to_column(var = "G"),
id.vars = "G",
variable.name = "sample",
value.name = "relab")
za_VANISH_G_long <- merge(za_VANISH_G_long, za_meta, by = "sample")
succin_long <- za_VANISH_G_long %>%
filter(G %in% c("Succinatimonas", "Succinivibrio", "Treponema") & site == "Bushbuckridge")
density_plot <- ggplot(succin_long, aes(x = relab * 100)) +
geom_density(fill = za_pal[1]) +
scale_x_log10(label = comma) +
facet_wrap(~ G, scales = "free_y", ncol = 1) +
theme_cowplot() +
labs(
x = "Relative abundance (%)",
y = "Density"
)
## correlate VANISH taxa ----
vanish_cor <- function(counts){
# correlation
vanish_cor_G <- cor(t(counts), method = "spearman")
# cluster to order rows
hc <- hclust(dist(vanish_cor_G))
row_order <- hc$order
vanish_cor_G <- vanish_cor_G[row_order, row_order]
# plot
vanish_cor_G_long <- melt(vanish_cor_G, value.name = "cor")
ggplot(vanish_cor_G_long, aes(Var2, Var1, fill = cor)) +
geom_tile() +
geom_text(aes(label = round(cor, 2))) +
scale_fill_gradient2(low = "blue", high = "red", mid = "white",
midpoint = 0, limit = c(-1,1)) +
theme_cowplot() +
theme(
axis.text.x = element_text(angle = 90, hjust = 1, vjust = 0.5),
axis.title = element_blank()
) +
labs(
fill = "Spearman's\nrho"
)
}
plot_data <- za_G_VANISH
rownames(plot_data) <- paste0(rownames(plot_data), "\n(", vanish_tax[match(rownames(plot_data), vanish_tax$G), "F"], ")")
plot_G <- vanish_cor(plot_data)
plot_F <- vanish_cor(za_F_VANISH)
plot_grid(
plot_grid(density_plot, plot_F, labels = c("A", "B")),
plot_G,
ncol = 1,
labels = c("", "C"),
rel_heights = c(0.27, 0.63)
)
ggsave(here("final_plots/supplementary/figure_S2_VANISH_cor.png"),
width = 9, height = 11)
library(harrietr)
## Succinatimonas correlation with other genera --
za_G_cor <- cor(t(za_G_rel[genefilter(za_G_rel, pOverA(0.1, 0.0001)), ]), method = "spearman")
za_G_cor_long <- melt_dist(za_G_cor)
za_G_cor_long %>%
filter(iso1 == "Succinatimonas" | iso2 == "Succinatimonas") %>%
arrange(-abs(dist)) %>%
head(20)
## plot distributions
za_VANISH_G_long <- reshape2::melt(za_G_VANISH %>% rownames_to_column(var = "G"),
id.vars = "G",
variable.name = "sample",
value.name = "relab")
za_VANISH_G_long <- merge(za_VANISH_G_long, za_meta, by = "sample")
succin_long <- za_VANISH_G_long %>%
filter(G %in% c("Succinatimonas", "Succinivibrio", "Treponema") & site == "Bushbuckridge")
density_plot <- ggplot(succin_long, aes(x = relab * 100)) +
geom_density(fill = za_pal[1]) +
scale_x_log10(label = comma) +
facet_wrap(~ G, scales = "free_y", ncol = 1) +
theme_cowplot() +
labs(
x = "Relative abundance (%)",
y = "Density"
)
## correlate VANISH taxa ----
vanish_cor <- function(counts){
# correlation
vanish_cor_G <- cor(t(counts), method = "spearman")
# cluster to order rows
hc <- hclust(dist(vanish_cor_G))
row_order <- hc$order
vanish_cor_G <- vanish_cor_G[row_order, row_order]
# plot
vanish_cor_G_long <- melt(vanish_cor_G, value.name = "cor")
ggplot(vanish_cor_G_long, aes(Var2, Var1, fill = cor)) +
geom_tile() +
geom_text(aes(label = round(cor, 2))) +
scale_fill_gradient2(low = "blue", high = "red", mid = "white",
midpoint = 0, limit = c(-1,1)) +
theme_cowplot() +
theme(
axis.text.x = element_text(angle = 90, hjust = 1, vjust = 0.5),
axis.title = element_blank()
) +
labs(
fill = "Spearman's\nrho"
)
}
plot_data <- za_G_VANISH
rownames(plot_data) <- paste0(rownames(plot_data), "\n(", vanish_tax[match(rownames(plot_data), vanish_tax$G), "F"], ")")
plot_G <- vanish_cor(plot_data)
plot_F <- vanish_cor(za_F_VANISH)
plot_grid(
plot_grid(density_plot, plot_F, labels = c("A", "B")),
plot_G,
ncol = 1,
labels = c("", "C"),
rel_heights = c(0.27, 0.63)
)
ggsave(here("final_plots/supplementary/figure_S2_VANISH_cor.png"),
width = 9, height = 11)
